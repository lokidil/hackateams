{"version":3,"sources":["webpack:///webpack/bootstrap?7f80","webpack:///external \"express-msteams-host\"?e438","webpack:///external \"debug\"?b2c7","webpack:///external \"botbuilder\"?fa14","webpack:///external \"botbuilder-dialogs\"?4042","webpack:///./src/app/server.ts?53c8","webpack:///external \"express\"?22fe","[]","webpack:///external \"path\"?74bb","webpack:///external \"morgan\"?3206","webpack:///external \"dotenv\"?e70f","webpack:///./src/app/TeamsAppsComponents.ts?b0db","webpack:///./src/app/csrDemoTab/CsrDemoTab.ts?0969","webpack:///./src/app/csrDemoBot/CsrDemoBot.ts?21de","webpack:///./src/app/csrDemoBot/dialogs/HelpDialog.ts?07e1","webpack:///./src/app/csrDemoBot/dialogs/WelcomeDialog.ts?f33f","webpack:///./src/app/csrDemoMessageExtension/CsrDemoMessageExtension.ts?3921","webpack:///external \"botbuilder-teams\"?cb0c","webpack:///./src/app/csrDemoOutgoingWebhook/CsrDemoOutgoingWebhook.ts?c0f4","webpack:///external \"crypto\"?4c76","webpack:///./src/app/csrDemoConnector/CsrDemoConnector.ts?db2e","webpack:///external \"request\"?0fbe","webpack:///external \"node-json-db\"?027e"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","log","debug","config","express","Express","port","process","env","PORT","use","json","verify","req","res","buf","encoding","rawBody","toString","urlencoded","extended","set","path","join","__dirname","morgan","static","MsTeamsApiRouter","allComponents","MsTeamsPageRouter","root","components","index","http","createServer","listen","nonce","CsrDemoTab","PreventIframe","CsrDemoBot","conversationState","activityProc","TeamsActivityProcessor","this","_csrDemoMessageExtension","dialogState","createProperty","dialogs","DialogSet","add","messageActivityHandler","onMessage","context","teamsContext","TeamsContext","from","activity","type","ActivityTypes","Message","text","getActivityTextWithoutMentions","toLowerCase","startsWith","sendActivity","dc","createContext","beginDialog","saveChanges","conversationUpdateActivityHandler","onConversationUpdateActivity","membersAdded","length","idx","id","recipient","welcomeCard","CardFactory","adaptiveCard","attachments","messageReactionActivityHandler","onMessageReaction","added","reactionsAdded","textFormat","processIncomingActivity","MessageExtensionDeclaration","BotDeclaration","MemoryStorage","MICROSOFT_APP_ID","MICROSOFT_APP_PASSWORD","HelpDialog","Dialog","dialogId","super","options","endDialog","WelcomeCard","CsrDemoMessageExtension","query","card","body","size","url","HOSTNAME","actions","title","data","action","$schema","version","preview","contentType","content","images","parameters","Promise","resolve","attachmentLayout","setting","state","CsrDemoOutgoingWebhook","next","incoming","message","builder","securityToken","SECURITY_TOKEN","auth","headers","authorization","msgBuf","Buffer","msgHash","crypto","createHmac","update","digest","send","JSON","stringify","OutgoingWebhookDeclaration","CsrDemoConnector","connectors","JsonDB","push","appType","color","existing","groupName","user","webhookUrl","getData","filter","error","map","connector","reject","sections","activityTitle","activityText","activityImage","facts","potentialAction","request","method","uri","decodeURI","response","statusCode","ConnectorDeclaration"],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = require(\"express-msteams-host\");","module.exports = require(\"debug\");","module.exports = require(\"botbuilder\");","module.exports = require(\"botbuilder-dialogs\");","import * as Express from \"express\";\nimport * as http from \"http\";\nimport * as path from \"path\";\nimport * as morgan from \"morgan\";\nimport { MsTeamsApiRouter, MsTeamsPageRouter } from \"express-msteams-host\";\nimport * as debug from \"debug\";\n\n\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\nlog(`Initializing Microsoft Teams Express hosted App...`);\n\n// Initialize dotenv, to use .env file settings if existing\n// tslint:disable-next-line:no-var-requires\nrequire(\"dotenv\").config();\n\n\n\n// The import of components has to be done AFTER the dotenv config\nimport * as allComponents from \"./TeamsAppsComponents\";\n\n// Create the Express webserver\nconst express = Express();\nconst port = process.env.port || process.env.PORT || 3007;\n\n// Inject the raw request body onto the request object\nexpress.use(Express.json({\n    verify: (req, res, buf: Buffer, encoding: string): void => {\n        (req as any).rawBody = buf.toString();\n    }\n}));\nexpress.use(Express.urlencoded({ extended: true }));\n\n// Express configuration\nexpress.set(\"views\", path.join(__dirname, \"/\"));\n\n// Add simple logging\nexpress.use(morgan(\"tiny\"));\n\n// Add /scripts and /assets as static folders\nexpress.use(\"/scripts\", Express.static(path.join(__dirname, \"web/scripts\")));\nexpress.use(\"/assets\", Express.static(path.join(__dirname, \"web/assets\")));\n\n// routing for bots, connectors and incoming web hooks - based on the decorators\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsApiRouter(allComponents));\n\n// routing for pages for tabs and connector configuration\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsPageRouter({\n    root: path.join(__dirname, \"web/\"),\n    components: allComponents\n}));\n\n// Set default web page\nexpress.use(\"/\", Express.static(path.join(__dirname, \"web/\"), {\n    index: \"index.html\"\n}));\n\n// Set the port\nexpress.set(\"port\", port);\n\n// Start the webserver\nhttp.createServer(express).listen(port, () => {\n    log(`Server running on ${port}`);\n});\n","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"path\");","module.exports = require(\"morgan\");","module.exports = require(\"dotenv\");","// Components will be added here\nexport const nonce = {}; // Do not remove!\n// Automatically added for the csrDemoTab tab\nexport * from \"./csrDemoTab/CsrDemoTab\";\n// Automatically added for the csrDemoBot bot\nexport * from \"./csrDemoBot/CsrDemoBot\";\n// Automatically added for the csrDemoOutgoingWebhook outgoing webhook\nexport * from \"./csrDemoOutgoingWebhook/CsrDemoOutgoingWebhook\";\n// Automatically added for the csrDemoConnector connector\nexport * from \"./csrDemoConnector/CsrDemoConnector\";\n","import { PreventIframe } from \"express-msteams-host\";\n\n/**\n * Used as place holder for the decorators\n */\n@PreventIframe(\"/csrDemoTab/index.html\")\n@PreventIframe(\"/csrDemoTab/config.html\")\n@PreventIframe(\"/csrDemoTab/remove.html\")\nexport class CsrDemoTab {\n}\n","import { BotDeclaration, MessageExtensionDeclaration, IBot, PreventIframe } from \"express-msteams-host\";\nimport * as debug from \"debug\";\nimport { DialogSet, DialogState } from \"botbuilder-dialogs\";\nimport { StatePropertyAccessor, CardFactory, TurnContext, MemoryStorage, ConversationState, ActivityTypes } from \"botbuilder\";\nimport HelpDialog from \"./dialogs/HelpDialog\";\nimport WelcomeCard from \"./dialogs/WelcomeDialog\";\nimport CsrDemoMessageExtension from \"../csrDemoMessageExtension/CsrDemoMessageExtension\";\nimport { TeamsContext, TeamsActivityProcessor } from \"botbuilder-teams\";\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\n/**\n * Implementation for CSRDemo Bot\n */\n@BotDeclaration(\n    \"/api/messages\",\n    new MemoryStorage(),\n    process.env.MICROSOFT_APP_ID,\n    process.env.MICROSOFT_APP_PASSWORD)\n@PreventIframe(\"/csrDemoBot/aboutCsrDemoBo.html\")\nexport class CsrDemoBot implements IBot {\n    private readonly conversationState: ConversationState;\n    /**\n     * Local property for CsrDemoMessageExtension\n     */\n    @MessageExtensionDeclaration(\"csrDemoMessageExtension\")\n    private _csrDemoMessageExtension: CsrDemoMessageExtension;\n    private readonly dialogs: DialogSet;\n    private dialogState: StatePropertyAccessor<DialogState>;\n    private readonly activityProc = new TeamsActivityProcessor();\n\n    /**\n     * The constructor\n     * @param conversationState\n     */\n    public constructor(conversationState: ConversationState) {\n        // Message extension CsrDemoMessageExtension\n        this._csrDemoMessageExtension = new CsrDemoMessageExtension();\n\n        this.conversationState = conversationState;\n        this.dialogState = conversationState.createProperty(\"dialogState\");\n        this.dialogs = new DialogSet(this.dialogState);\n        this.dialogs.add(new HelpDialog(\"help\"));\n\n        // Set up the Activity processing\n\n        this.activityProc.messageActivityHandler = {\n            // Incoming messages\n            onMessage: async (context: TurnContext): Promise<void> => {\n                // get the Microsoft Teams context, will be undefined if not in Microsoft Teams\n                const teamsContext: TeamsContext = TeamsContext.from(context);\n\n                // TODO: add your own bot logic in here\n                switch (context.activity.type) {\n                    case ActivityTypes.Message:\n                        const text = teamsContext ?\n                            teamsContext.getActivityTextWithoutMentions().toLowerCase() :\n                            context.activity.text;\n\n                        if (text.startsWith(\"hello\")) {\n                            await context.sendActivity(\"Oh, hello to you as well!\");\n                            return;\n                        } else if (text.startsWith(\"help\")) {\n                            const dc = await this.dialogs.createContext(context);\n                            await dc.beginDialog(\"help\");\n                        } else {\n                            await context.sendActivity(`I\\'m terribly sorry, but my master hasn\\'t trained me to do anything yet...`);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n\n                // Save state changes\n                return this.conversationState.saveChanges(context);\n            }\n        };\n\n        this.activityProc.conversationUpdateActivityHandler = {\n            onConversationUpdateActivity: async (context: TurnContext): Promise<void> => {\n                if (context.activity.membersAdded && context.activity.membersAdded.length !== 0) {\n                    for (const idx in context.activity.membersAdded) {\n                        if (context.activity.membersAdded[idx].id === context.activity.recipient.id) {\n                            const welcomeCard = CardFactory.adaptiveCard(WelcomeCard);\n                            await context.sendActivity({ attachments: [welcomeCard] });\n                        }\n                    }\n                }\n            }\n        };\n\n        // Message reactions in Microsoft Teams\n        this.activityProc.messageReactionActivityHandler = {\n            onMessageReaction: async (context: TurnContext): Promise<void> => {\n                const added = context.activity.reactionsAdded;\n                if (added && added[0]) {\n                    await context.sendActivity({\n                        textFormat: \"xml\",\n                        text: `That was an interesting reaction (<b>${added[0].type}</b>)`\n                    });\n                }\n            }\n        };\n    }\n\n    /**\n     * The Bot Framework `onTurn` handlder.\n     * The Microsoft Teams middleware for Bot Framework uses a custom activity processor (`TeamsActivityProcessor`)\n     * which is configured in the constructor of this sample\n     */\n    public async onTurn(context: TurnContext): Promise<any> {\n        // transfer the activity to the TeamsActivityProcessor\n        await this.activityProc.processIncomingActivity(context);\n    }\n\n}\n","import { Dialog, DialogContext, DialogTurnResult } from 'botbuilder-dialogs';\n\nexport default class HelpDialog extends Dialog {\n    constructor(dialogId: string) {\n        super(dialogId);\n    }\n\n    public async beginDialog(context: DialogContext, options?: any): Promise<DialogTurnResult> {\n        context.context.sendActivity(`I'm just a friendly but rather stupid bot, and right now I don't have any valuable help for you!`);\n        return await context.endDialog();\n    }\n}\n","const WelcomeCard = require('./WelcomeCard.json');\n\nexport default WelcomeCard;\n","import * as debug from \"debug\";\nimport { PreventIframe } from \"express-msteams-host\";\nimport { TurnContext, CardFactory } from \"botbuilder\";\nimport { MessagingExtensionQuery, MessagingExtensionResult } from \"botbuilder-teams\";\nimport { IMessagingExtensionMiddlewareProcessor } from \"botbuilder-teams-messagingextensions\";\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\n@PreventIframe(\"/csrDemoMessageExtension/config.html\")\nexport default class CsrDemoMessageExtension implements IMessagingExtensionMiddlewareProcessor {\n\n    public async onQuery(context: TurnContext, query: MessagingExtensionQuery): Promise<MessagingExtensionResult> {\n        const card = CardFactory.adaptiveCard(\n            {\n                type: \"AdaptiveCard\",\n                body: [\n                    {\n                        type: \"TextBlock\",\n                        size: \"Large\",\n                        text: \"Headline\"\n                    },\n                    {\n                        type: \"TextBlock\",\n                        text: \"Description\"\n                    },\n                    {\n                        type: \"Image\",\n                        url: `https://${process.env.HOSTNAME}/assets/icon.png`\n                    }\n                ],\n                actions: [\n                    {\n                        type: \"Action.Submit\",\n                        title: \"More details\",\n                        data: {\n                            action: \"moreDetails\",\n                            id: \"1234-5678\"\n                        }\n                    }\n                ],\n                $schema: \"http://adaptivecards.io/schemas/adaptive-card.json\",\n                version: \"1.0\"\n            });\n        const preview = {\n            contentType: \"application/vnd.microsoft.card.thumbnail\",\n            content: {\n                title: \"Headline\",\n                text: \"Description\",\n                images: [\n                    {\n                        url: `https://${process.env.HOSTNAME}/assets/icon.png`\n                    }\n                ]\n            }\n        };\n\n        if (query.parameters && query.parameters[0] && query.parameters[0].name === \"initialRun\") {\n            // initial run\n\n            return Promise.resolve({\n                type: \"result\",\n                attachmentLayout: \"list\",\n                attachments: [\n                    { ...card, preview }\n                ]\n            } as MessagingExtensionResult);\n        } else {\n            // the rest\n            return Promise.resolve({\n                type: \"result\",\n                attachmentLayout: \"list\",\n                attachments: [\n                    { ...card, preview }\n                ]\n            } as MessagingExtensionResult);\n        }\n    }\n\n    public async onCardButtonClicked(context: TurnContext, value: any): Promise<void> {\n        // Handle the Action.Submit action on the adaptive card\n        if (value.action === \"moreDetails\") {\n            log(`I got this ${value.id}`);\n        }\n        return Promise.resolve();\n    }\n\n\n\n\n\n\n    // this is used when canUpdateConfiguration is set to true\n    public async onQuerySettingsUrl(context: TurnContext): Promise<{ title: string, value: string }> {\n        return Promise.resolve({\n            title: \"CSRDemo Message Extension Configuration\",\n            value: `https://${process.env.HOSTNAME}/csrDemoMessageExtension/config.html`\n        });\n    }\n\n    public async onSettings(context: TurnContext): Promise<void> {\n        // take care of the setting returned from the dialog, with the value stored in state\n        const setting = context.activity.value.state;\n        log(`New setting: ${setting}`);\n        return Promise.resolve();\n    }\n\n}\n","module.exports = require(\"botbuilder-teams\");","import * as builder from \"botbuilder\";\nimport * as express from \"express\";\nimport * as crypto from \"crypto\";\nimport { OutgoingWebhookDeclaration, IOutgoingWebhook } from \"express-msteams-host\";\n\n/**\n * Implementation for CSRDemo Outgoing Webhook\n */\n@OutgoingWebhookDeclaration(\"/api/webhook\")\nexport class CsrDemoOutgoingWebhook implements IOutgoingWebhook {\n\n    /**\n     * The constructor\n     */\n    public constructor() {\n    }\n\n    /**\n     * Implement your outgoing webhook logic here\n     * @param req the Request\n     * @param res the Response\n     * @param next\n     */\n    public requestHandler(req: express.Request, res: express.Response, next: express.NextFunction) {\n        // parse the incoming message\n        const incoming = req.body as builder.Activity;\n\n        // create the response, any Teams compatible responses can be used\n        const message: Partial<builder.Activity> = {\n            type: builder.ActivityTypes.Message\n        };\n\n        const securityToken = process.env.SECURITY_TOKEN;\n        if (securityToken && securityToken.length > 0) {\n            // There is a configured security token\n            const auth = req.headers.authorization;\n            const msgBuf = Buffer.from((req as any).rawBody, \"utf8\");\n            const msgHash = \"HMAC \" + crypto.\n                createHmac(\"sha256\", new Buffer(securityToken as string, \"base64\")).\n                update(msgBuf).\n                digest(\"base64\");\n\n            if (msgHash === auth) {\n                // Message was ok and verified\n                message.text = `Echo ${incoming.text}`;\n            } else {\n                // Message could not be verified\n                message.text = `Error: message sender cannot be verified`;\n            }\n        } else {\n            // There is no configured security token\n            message.text = `Error: outgoing webhook is not configured with a security token`;\n        }\n\n        // send the message\n        res.send(JSON.stringify(message));\n    }\n}\n","module.exports = require(\"crypto\");","import * as request from \"request\";\nimport { Request } from \"express\";\nimport { ConnectorDeclaration, IConnector, PreventIframe } from \"express-msteams-host\";\nimport { CardFactory } from \"botbuilder-core\";\nimport JsonDB = require(\"node-json-db\");\nimport * as debug from \"debug\";\n\nconst log = debug(\"msteams\");\n\n/**\n * The connector data interface\n */\ninterface ICsrDemoConnectorData {\n    webhookUrl: string;\n    user: string;\n    appType: string;\n    groupName: string;\n    color: string;\n    existing: boolean;\n}\n\n/**\n * Implementation of the \"CsrDemoConnectorConnector\" Office 365 Connector\n */\n@ConnectorDeclaration(\n    \"/api/connector/connect\",\n    \"/api/connector/ping\"\n)\n@PreventIframe(\"/csrDemoConnector/config.html\")\nexport class CsrDemoConnector implements IConnector {\n    private connectors: any;\n\n    public constructor() {\n        // Instantiate the node-json-db database (connectors.json)\n        this.connectors = new JsonDB(\"connectors\", true, false);\n    }\n\n    public Connect(req: Request) {\n        if (req.body.state === \"myAppsState\") {\n            this.connectors.push(\"/connectors[]\", {\n                appType: req.body.appType,\n                color: req.body.color,\n                existing: true,\n                groupName: req.body.groupName,\n                user: req.body.user,\n                webhookUrl: req.body.webhookUrl\n            });\n        }\n    }\n\n    public Ping(req: Request): Array<Promise <void>> {\n        // clean up connectors marked to be deleted\n        try {\n            this.connectors.push(\"/connectors\",\n                (this.connectors.getData(\"/connectors\") as ICsrDemoConnectorData[]).filter(((c) => {\n                    return c.existing;\n                })));\n        } catch (error) {\n            if (error.name && error.name === \"DataError\") {\n                // there\"s no registered connectors\n                return [];\n            }\n            throw error;\n        }\n\n        // send pings to all subscribers\n        return (this.connectors.getData(\"/connectors\") as ICsrDemoConnectorData[]).map((connector, index) => {\n            return new Promise<void>((resolve, reject) => {\n                // TODO: implement adaptive cards when supported\n                const card = {\n                    title: \"Sample Connector\",\n                    text: \"This is a sample Office 365 Connector\",\n                    sections: [\n                        {\n                            activityTitle: \"Ping\",\n                            activityText: \"Sample ping \",\n                            activityImage: `https://${process.env.HOSTNAME}/assets/icon.png`,\n                            facts: [\n                                {\n                                    name: \"Generator\",\n                                    value: \"teams\"\n                                },\n                                {\n                                    name: \"Created by\",\n                                    value: connector.user\n                                }\n                            ]\n                        }\n                    ],\n                    potentialAction: [{\n                        \"@context\": \"http://schema.org\",\n                        \"@type\": \"ViewAction\",\n                        \"name\": \"Yo Teams\",\n                        \"target\": [\"http://aka.ms/yoteams\"]\n                    }],\n                };\n\n                log(`Sending card to ${connector.webhookUrl}`);\n\n                request({\n                    method: \"POST\",\n                    uri: decodeURI(connector.webhookUrl),\n                    headers: {\n                        \"content-type\": \"application/json\",\n                    },\n                    body: JSON.stringify(card)\n                }, (error: any, response: any, body: any) => {\n                    log(`Response from Connector endpoint is: ${response.statusCode}`);\n                    if (error) {\n                        reject(error);\n                    } else {\n                        // 410 - the user has removed the connector\n                        if (response.statusCode === 410) {\n                            this.connectors.push(`/connectors[${index}]/existing`, false);\n                        }\n                        resolve();\n                    }\n                });\n            });\n        });\n    }\n}\n\n","module.exports = require(\"request\");","module.exports = require(\"node-json-db\");"],"sourceRoot":""}